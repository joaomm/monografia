class Digrafo:
	instVar numeroDeVertices
	instVar listaDeAdjacencia
	instVar Infinito = -1

	def construtor(numVertices):
		numeroDeVertices = numVertices
		listaDeAdjacencia = nova Lista(numeroDeVertices)

	def adicionaAresta(origem, destino, custo):
		listaDeAdjacencia[origem] = nova Aresta(destino, custo)

	def arestasDoVertice(vertice):
		return listaDeAdjacencia[vertice]
	
	def custosAPartirDoVertice(vertice):
		custos = inicializaCustos(vertice)
		fila = inicializaFila()
		
		while(aindaHaVertices(fila)):
			verticeDoMomento = fila.verticeDaArestaComCustoMinimo()
			for aresta in (arestasDoVertice(verticeDoMomento)):
				verticeDestino = aresta.verticeDestino()
				custo = aresta.custo()
				
				if(verticeNuncaAtingido(custos, verticeDestino)):
					custos[verticeDestino] = custos[verticeDoMomento] + custo
					fila.insere(nova Aresta(verticeDestino, custos[verticeDestino]))
					
				else if(caminhoComNovaArestaMaisBarato(custos, verticeDestino, verticeDoMomento, custo)):
					custos[verticeDestino] = custos[verticeDoMomento] + custo
		
		return custos

	def inicializaCustos(vertice):
		custos = nova Lista(numeroDeVertices)
		marcaTodosOsVerticesComNaoAtingidos(custos)
		marcaVerticeOrigemComoAtingidoSemCusto(custos, vertice)
		retorna custos
	
	def marcaTodosOsVerticesComoNaoAtingidos(custos):
		for i in (1, numeroDeVertices):
			custos[i] = Infinito
	
	def marcaVerticeOrigemComoAtingidoSemCusto(custos, vertice):
		custos[vertice] = 0
		
	def inicializaCustos():
		fila = nova FilaDePrioridades(numeroDeVertices)
		inserePrimeiraArestaNula(fila)
		retorna fila
	
	def inserePrimeiraArestaNula(fila):
		fila.insere(nova Aresta(0,0))
	
	def aindaHaVertices(fila):
  		return fila.vazia()
  	
	def verticeNuncaAtingido(custos, vertice):
		custos[vertice] == Infinito
		
	def caminhoComNovaArestaMaisBarato(custos, verticeDestino, verticeDoMomento, custo):
	  custos[verticeDestino] > custos[verticeDoMomento] + custo