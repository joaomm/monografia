class Digrafo:
	var numeroDeVertices
	var listaDeAdjacencia

	def construtor(noVertices):
		numeroDeVertices = noVertices
		listaDeAdjacencia = nova Lista(numeroDeVertices)

	def adicionaAresta(origem, destino, custo):
		listaDeAdjacencia[origem] = nova Aresta(destino, custo)

	def arestasDoVertice(vertice):
		return listaDeAdjacencia[vertice]



class CalculadorCaminhosMinimos:
	var custo
	var fila
	var verticeOrigem
	var digrafo
	var numeroDeVertices
	var Infinito = -1
	
	def construtor(umDigrafo):
		numeroDeVertices = umDigrafo.numeroDeVertices
		digrafo = umDigrafo
	
	def custosAPartirDoVertice(vertice):
		inicializaCustosEFila(vertice)
		atualizaCustosAteAcabarVertices()
		return custos
	
	def inicializaCustosEFila(vertice):
		verticeOrigem = vertice
		inicializaCustos()
		inicializaFila()
	
	def inicializaCustos():
		custos = nova Lista(numeroDeVertices)
		setaTodosOsVerticesComNaoAtingidos()
		setaVerticeOrigemComoAtingidoSemCusto()
	
	def setaTodosOsVerticesComCustoInfinito():
		for i in (1, numeroDeVertices):
			custos[i] = Infinito
	
	def setaVerticeOrigemComoAtingidoSemCusto():
		custos[verticeOrigem] = 0
		
	def inicializaCustos():
		fila = nova FilaDePrioridades(numeroDeVertices)
		inserePrimeiraArestaNula()

	
	def inserePrimeiraArestaNula():
		fila.insere(nova Aresta(0,0))
	
	def aindaHaVertices(fila):
		return fila.vazia()
	
	def atualizaCustosAPartirDoVerticeComCustoMinimo()
		while(aindaHaVertices()):
			atualizaCustosAPartirDoVerticeComCustoMinimo()
					
		
	def atualizaCustosAPartirDoVerticeComCustoMinimo():
		verticeMinimo = fila.verticeDaArestaComCustoMinimo()
		for aresta in (digrafo.arestasDoVertice(verticeMinimo)):			
			atualizaCustoSeCaminhoMaisBarato(verticeMinimo, aresta)
	
	
	def atualizaCustoSeCaminhoMaisBarato(verticeMinimo, aresta):
	  verticeDestino = aresta.verticeDestino()
			  
	  if(verticeNuncaAtingido(verticeDestino)):
		  atualizaCustoEInsereNaFila(verticeDestino, aresta)
		
	  else if(caminhoComNovaArestaMaisBarato(verticeDestino, aresta)):
		  atualizaCustoComNovaAresta(verticeDestino, aresta)
		
	def verticeNuncaAtingido(vertice):
		custos[vertice] == Infinito
		
	def atualizaCustoEInsereNaFila(verticeDestino, aresta):
		atualizaCusto(verticeDestino, aresta)
		fila.insere(nova Aresta(verticeDestino, custos[verticeDestino]))
		
	def caminhoComNovaArestaMaisBarato(verticeDestino, aresta):
	  novoCusto = custoComNovaAresta(aresta)
	  return custos[verticeDestino] > novoCusto
	  
	def atualizaCustoComNovaAresta(verticeDestino, aresta):
	  novoCusto = custoComNovaAresta(aresta)
	  custos[verticeDestino] = custos[verticeMinimo] + novoCusto

	def custoComNovaAresta(aresta):
	  return custos[aresta.verticeDestino()] + aresta.custo()